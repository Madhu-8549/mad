import streamlit as st
import google.generativeai as genai
import librosa
import numpy as np
from audiorecorder import audiorecorder
import joblib
import os

# -------------------------------
# Gemini setup
# -------------------------------
genai.configure(api_key="YOUR_GEMINI_API_KEY")

def generate_story_gemini(prompt):
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    return response.text

# -------------------------------
# Load or train simple emotion model
# -------------------------------
EMOTION_MODEL_FILE = "emotion_model.pkl"

def extract_features(audio_file):
    y, sr = librosa.load(audio_file, sr=16000)
    mfccs = np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13), axis=1)
    chroma = np.mean(librosa.feature.chroma_stft(y=y, sr=sr), axis=1)
    spectral = np.mean(librosa.feature.spectral_contrast(y=y, sr=sr), axis=1)
    features = np.hstack([mfccs, chroma, spectral])
    return features

def train_dummy_emotion_model():
    from sklearn.svm import SVC
    from sklearn.preprocessing import StandardScaler
    from sklearn.pipeline import make_pipeline

    # Train with dummy data (normally use real dataset like RAVDESS/CREMA-D)
    X = np.random.rand(40, 25)   # 40 samples, 25 features
    y = np.random.choice(["happy", "sad", "angry", "neutral"], 40)

    model = make_pipeline(StandardScaler(), SVC(probability=True))
    model.fit(X, y)
    joblib.dump(model, EMOTION_MODEL_FILE)

if not os.path.exists(EMOTION_MODEL_FILE):
    train_dummy_emotion_model()

emotion_model = joblib.load(EMOTION_MODEL_FILE)

def predict_tone(audio_file_path):
    try:
        features = extract_features(audio_file_path).reshape(1, -1)
        prediction = emotion_model.predict(features)[0]
        return prediction
    except Exception as e:
        print("Tone detection error:", e)
        return "neutral"

# -------------------------------
# Streamlit UI
# -------------------------------
def get_user_inputs():
    st.title("üìñ Story Generator (Gemini + Emotion from Audio)")
    char_name = st.text_input("Enter the character's name")
    age = st.number_input("Enter the character's age", min_value=1, max_value=16, step=1)
    char_gender = st.radio("Select the character's gender", options=["Boy", "Girl"])
    genre = st.text_input("Enter the genre")
    setting = st.text_input("Enter the story setting (e.g., Forest, City, Spaceship)")
    moral = st.text_input("Enter the moral of the story")
    return char_name, age, char_gender, genre, setting, moral

def record_audio():
    st.subheader("üé§ Audio Recorder")
    audio = audiorecorder("Click to record", "Click to stop recording")
    audio_file_path = None
    if len(audio) > 0:
        audio_file_path = "user_voice.wav"
        audio.export(audio_file_path, format="wav")
        st.audio(audio.export().read(), format="audio/wav")
        st.success("‚úÖ Audio recorded successfully!")
    return audio_file_path

# -------------------------------
# Main workflow
# -------------------------------
def main():
    char_name, age, char_gender, genre, setting, moral = get_user_inputs()
    if st.button("Generate Story"):
        # 1. Generate first part
        first_prompt = (
            f"You are a children's book story writer. "
            f"Craft a {genre} story for a {age}-year-old child. "
            f"The story is happening in {setting}. "
            f"The main character is a {age}-year-old {char_gender.lower()} named {char_name}. "
            "Create a sense of anticipation, but do not bring the story to a climax or resolution. "
            "Leave the story open for continuation."
        )
        first_story_part = generate_story_gemini(first_prompt)
        st.subheader("‚ú® First Part of the Story")
        st.write(first_story_part)

        # 2. Record audio
        st.info("Now record your voice while listening to the story üåù")
        audio_file = record_audio()

        # 3. Detect tone
        tone = predict_tone(audio_file) if audio_file else "neutral"
        st.info(f"üé≠ Detected tone: {tone}")

        # 4. Generate continuation
        continuation_prompt = (
            f"You are a children's book story writer. Continue the story. "
            f"The first part is: {first_story_part}. "
            f"The audience tone is: {tone}. "
            f"The moral of the story should be: {moral}. "
            "Craft a continuation that gradually builds toward the moral."
        )
        with st.spinner("Crafting a personalized story just for you..."):
            second_story_part = generate_story_gemini(continuation_prompt)
            st.subheader("üìñ Continuation of the Story")
            st.write(second_story_part)

if _name_ == "_main_":
    main()
